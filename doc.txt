Pyth documentation 4.3

Each character is a separate token, except for numbers, 
strings, and python literals and tokens of the form "._", where _ could be a variety of things.
Written in Polish notation, with fixed arities for each operator. Statements are special, allow multiple lines.
Top-level values a printed by default, unless prefixed by " " or the value is None.

num = int, float
seq = str, list, tuple
col = str, list, tuple, set

Lines with implicit lambdas indicate the when that function is nested inside another identical function,
the variable which will be used in the lambda expression will advance by one, wrapping around. If
used consecutively, the first variable in sequence will be used each time.

Char, arity, begins line, mnemonic, details. When in doubt, similar to python.

0                        A leading 0 is a separate token, the number 0.

0123456789               Numeric literals

\n 1 N newline           Separates without suppressing printing.
   1 N blank             Primarily used to separate numeric literals. Also suppresses printing, which is default on.
!  1 N not               Logical not. Uses Python's truthy/falsy.
"  X N quote             Begins and ends string literals. Implicit at end of file.
#  S Y                   "While True:" loop. On error, suppresses error and breaks out of loop.
$  X N super-quote       Begins and ends Python literals. A Python literal is placed directly into the compiled Python output. Counts as one argument for arity purposes. Disabled online.
%  2 N mod               On integers, modulus. On complex, mod real and imag separately. On string, string formatting. %<int><seq> is a modular slice, <seq>[::<int>] in Python.
&  2 N and               Python's and-operator (short circuiting). &ab returns a, if it evaluates to a falsy value otherwise b.
'  1 N quote-file        Cat file, return file a list of lines. File name as input. If starts with http, does get http request. If image file returns bitmap nested array of tuples (grayscale single value instead of tuples).
(  I N tuple             Tuple constructor. Unbounded.
)  X N close-paren       Ends functions, statements. Marks last line of statement, last arg. of function. Necessary for statements, unbounded functions.
*  2 N times             Like python, multiplication, replication. Cartesian product on lists, tuples or sets.
+  2 N plus              Addition, concatenation. Set union. Prepend or append non-list to list. str + num cast to str.
,  2 N pair              2 entry list.
-  2 N minus             Subtraction, setwise difference. Maintains order. -<num><seq> coerces number to sequence type. Return type is type of first arg.
.  X N point             Numeric literals. Secondary function list - see end of doc for details.
/  2 N div               Floored division. .count() method on containers.
:  3 N slice-sub         Python slice. :<seq><int><int> -> <seq>[<int>:<int>].
                         :<str><str><str> is regex substitution, substitute in a, b for c. :<str><str><num> is suite of regex operations. See bottom.
                         On :<num><num><num>, generalized range. :abc is range from a to b, step size c or -c as appropriate if c > 0. If c < 0, equivalent to :ba_c
                         :<idx><col><any> is indexed substitution. For every index in b an element is taken from c (cycling when exhausted), and assigned to a at that index.
;  X N end-line          End everything. Infinite ). Best used in statements.
<  2 N less-than         Less than, subset, slice. < seq num is seq[:num]. < num seq is seq[:-num]. Compare by magnitude on complex.
=  2 Y assign            Assignment, using deep copy. Returns the assignment value. +2=Z7 -> Z=7, returns 9.
                         Augmented assignment. =*T2 -> T=20.
>  2 N greater-than      Greater than, superset, slice. > seq num is seq[num:]. > num seq is seq[-num:]. Compare by magnitude on complex.
?  3 N ternary           C-style ternary. ?abc => if a then b else c
@  2 N lookup            Lookup from str, list or dict. Modulo wrapping on list, str. On seq, seq, intersection.
                         Specifically, filter second arg on presence in first arg. On num, num, bth root of a.
A  1 Y assign-pair       A_ => G,H = _. Input must be a 2-tuple.
B  0 Y break             Python break. Implicit ). Also is bifurcate operator. <func>B<arg><oth args> = ,<arg><func><arg><oth args>
C  1 N chr               char -> int, int -> char. str -> int, treated as base 256 number. Matrix transpose on list of lists, zip(*a) specifically. If input was list of str, output will be as well. Conjugate on complex. If input is int outside unicode range, convert to string as base 256 number.
D  S Y def               Python def. Match arity w/ existing function. Memoized.
E  S Y else              Python else.
F  S Y for               Python for. Also is fold operator. <binary>F = .U<binary>bZ.
G  0 N strinG.lowercase  Variable. "abcdefghijklmnopqrstuvwxyz"
H  0 N hash-table        Variable. {}
I  S Y if                Python if.
J  1 Y                   Variable. Autoinitializing. J=copy(_).
K  1 Y                   Variable. Autoinitializing. K=_. For stringing.
L  1 Y lambda            define y(b): return _. '(b) on second use. Also is left map operator. <LG3 = [<G0, <G1, <G2]. Map var is 2nd, arity must be at least 2.
M  1 Y The one after L   define g(G,H): return _. n(G,H) on second use. Also is map operator. <func>M = m<func>d or m<func>.*d. Also can be repeated, e.g. <func>MM = m<func>Md = mm<func>kd. Also can be repeated with a L or R at the end.
N  0 N                   Variable. '"'
O  1 N randOm-chOice     random.choice(_). Uses range(int). O0 = random.random(). Oa if a < 0 is random.seed(-a).
P  1 N Prime/Pop         prime factorization on int. All but last on str, list. Phase on complex.
Q  0 N quick             Variable. Autoinitializing to evaluated input.
R  1 Y return            Python return. Implicit ). Also is right map operator. %R4[5 10 20 = [5%4, 10%4, 20%4]. Map var is first, arity must be at least 2.
S  1 N sorted            Python sorted. Inclusive range from 1 on int.
T  0 N ten               Variable. 10
U  1 N unary-range       Python unary range. U_=Ul_ on str, list. On negative ints, range(a, 0).
V  S Y for-N-in          Implicit variable for loop. Equivalent to FN. Rotates FN -> FH -> Fb on nested use. Also is vectorize operator. +V[1 2 3)[4 5 6) = [5, 7, 9]. If given sequence, loops thorugh sequence.
W  S Y while             Python while. Also is conditional aplication operator.
                         _WNG = _G if N else G.
                         +WNZ2 = +Z2 if N else Z.
X  3 N indeXed assign    Indexed assignment, returns updated. Only returns on str, mod-wrap on list.
                         On <seq><seq><seq> performs translation, uses reversed of 2nd arg, if 3rd is omitted.
                         On <int><list> or <any><dict>, performs indexed +=. Assigns if key not in dict.
Y  0 N                   Variable. []
Z  0 N zero              Variable. 0
[  X N list              List constructor. Unbounded.
\  X N char-of           Escape character to string.
]  1 N close-bracket     One element list.
^  2 N power             Python pow, Cartesian product with # of repeats.
_  1 N neg               Negation. Str and list reverse.
`  1 N repr              Python repr.
a  2 N append            Python .append(), .add(). First argument must be a list or set.
                         Returns resultant list or string as well as modifying input.
                         On non-hashable additions to set, casts to tuple.
b  0 N lineBreak         Variable. "\n"
c  2 N chop              On <str/list><int> chop str/list every n elements. 
                         On <int><str/list> split str/list into n pieces (elements are equally distributed).
                         Also str.split, floating point division.
                         On <seq><col of ints> split seq at each int into list of seqs.
d  0 N                   Variable. " "
e  1 N end               %10 or last element. Imaginary part on complex.
f  2 N filter            Implicit lambda, T -> Y -> Z -> . on num, iter.count. Default second input 1.
g  2 N grt-or-eq         Python >=. Superset. g<seq><int> = seq[int-1:]
h  1 N head              First element, +1.
i  2 N int-2             Convert str or list from given base to base 10, or gcd.
j  2 N join              Python join, or convert to base. Output in list form. j_) is equivalent to jb_
k  0 N                   Variable. ""
l  1 N len               Python len. log base 2 on nums.
m  2 N map               Python 2 map. Int as second arg -> range(<int>). Implicit lambda, d -> k -> b ->
n  2 N not-equal         Python !=.
o  2 N order-by          Python sorted, key=. Implicit lambda, N -> Z ->
p  1 N print             Python print, no trailing character. Returns the input.
q  2 N equals            Python ==.
r  2 N range             Python 2 range. range(a, b, -1) if a > b. Various string + seq processing (see below). On str, str, str range in C order.
s  1 N sum-int           Reduce Pyth + on non-str seq, cast to int on other. Real part on complex.
t  1 N tail              _[1:], _-1.
u  3 N reduce            Reduce, implicit lambda. 3rd is base case. G,H -> N,T.
                         Terminates when loop detected, just before first repetition if 2nd arg omitted, e.g. u<1st><3rd>).
v  1 N eval              Python eval. Often used for str -> int.
w  0 N raw_input         Python 3 input()
x  2 N index             Find first occurrence. -1 if not found. Bitwise xor.
y  1 N                   On num, double. On col, powerset.
z  0 N                   Variable. Autoinitializing to input.
{  1 N set               Python set. Makes one element set on num.
|  2 N or                Logical or. Short-circuiting.
}  2 N in                Python in. Inclusive range on int, int.
~  2 Y post_assign       Similar to =, except that the return value is the old value of the variable.
.a 1 N abs               Python abs(_). On list of nums, vector length. On list of 2 lists of nums, Euclidean distance.
.A 1 N all               Python all(_).
.b 3 N binary_map        Python map over two args. First arg is lambda, (N, Y). num -> urange, missing 3rd arg assumes 2nd arg is col of tuples.
.B 1 N bin               Binary string representing _. Direct on int, interpreted as UTF-8 on str. No '0b'.
.c 2 N combinations      Combinations of elements from a of length b. On two ints, nCr.
.C 2 N comb-replacement  Combinations of elements from a of length b, with replacement.
.d 1 n dict_or_date      On col, python dict function. On int, various info about current date and time.
.D 2 N divmod_or_delete  .D<num><num is divmod(<num>,<num>).
                         .D<seq><num> removes the <num>th element of <seq>.
                         .D<seq><seq> is the same but for all the elements in <seq>.
.e 2 N enumerate         map over a enumerate. First arg is lambda, (k, b) -> (Y, Z) ->. k is the number, b is the sequence.
.E 1 N any               Python any(_).
.f 3 N first_n           .fabc: Filters for the first b elements of infinite sequence starting at c for which a is truthy. c defaults to 1.
                         a is lambda of Z.
                         Infinite sequence is increasing numbers by 1 on num, or successive strings on string.
                         Uses Ruby .succ equivalent, doc here: http://ruby-doc.org/core-2.2.2/String.html#method-i-succ
.F 2 N format            a.format(b) - if b is a non-string sequence, it will be unpacked.
.g 2 N group_by          group seq by the value of the lambda. Groups are sorted by the value of the lambda. Lambda k.
.h 1 N hash
.H 1 N hex               Hexadecimal string representing _. Direct on int, interpreted as UTF-8 on str. No '0x'.
.i 2 N interleave        Interleave two sequences - .i([a1, a2], [b1, b2, b3, b4]) = [a1, b1, a2, b2, b3, b4]
.I 2 N invert            .I<lambda><num> invert <num> = <lambda>(x). Searches over positive reals. Works on increasing functions. Lambda G.
.j 2 N complex           Complex number constructor. .jab = a + bj. .j) = 1j.
.l 2 N log               Python math.log(a, b). Default for b is natural log.
.m 2 N minimal           Filter 2nd arg on elements which give minimal value when 1st arg is applied.
                         First arg is lambda, b ->
.M 2 N maximal           Filter 2nd arg on elements which give maximal value when 1st arg is applied.
                         First arg is lambda, Z ->
.n 1 N Numbers           List of mathematical constants: pi, e, sqrt(2), phi, infinity. Deep flatten on lists.
.N 1 Y The one after M   def :(N, T, Y): return _. X(N, T, Y) on second use.
.O 1 N oct               Octal string representing _. Direct on int, interpreted as UTF-8 on str. No '0o'. Average of a list of numbers.
.p 1 N permutations      itertools.permutations(_).
.P 2 N permutations      itertools.permutations(a, b). On two ints, nPr.
.q 0 Y quit              sys.exit(0). Exits the program immediately.
.Q 0 N eval-all-input    Take all of STDIN, return as list of evaluated (literal_eval) lines. Cached. .Q and .z refer to the same data.
.r 2 N rotate            On <col><seq>, perform a translation on <col> which maps each element of <seq> to its successor.
.R 2 N round             Python round(a, b). On float as b, round to the same length as a.
.s 2 N strip             Strip the elements in b from the beginning and end of a.
.S 1 N shuffle           .S<col> random.shuffle(<col>). .S(<int>) = .S(range(<int>))
.t 2 N trigonometry      Collection of trigonometric functions. See below. Also padded transpose. Pads first input to rectangle with second input, then transposes.
.T 1 N transpose         Matrix transpose. Do not strip characters, instead top justify. list of str -> list of str, ofther to list of lists. Casts int elems to urange.
.u 3 N cumul-reduce      Just like u, except returns a collection of all intermediate states. lambda N, Y.
.U 2 N reduce2           The 2 input reduce, uses first value of sequence as initial value and the rest as sequence. (b, Z) -> (k, Y) ->
.v 1 N pyth-eval         Eval a pyth expression. Must be a str.
.V 2 Y forever           An infinite for loop. b iterates over an infinite sequence starting at the input, same sequence as .f.
                         On num, incrementing sequence. On str, Ruby's .succ sequence.
.w 2 N file write        Writes first arg to file second arg. If starts with http does http post request with data. If array, writes to image file as bitmap. Default file name is o.txt/png. Writes in iso-8859-1 format.
.W 3 N apply-while       First arg is condition, lambda H. Second arg is modification, lambda Z. Third arg is starting value. While condtion(value): value = modification(value)
.x 2 N try-except        Attempts to run first arg. If an exception occurs, runs the second.
.z 0 N all-input         Take all of STDIN, return as list of lines. Cached. .Q and .z refer to the same data.
.Z 1 N compress          Compresses or decompresses a string. Before decompressing you might have to escape the chars '"' and '\' and replace the null-byte with `\0`.
.^ 3 N powmod            Python pow(a, b, c).
.& 2 N bitand            Python bitwise &.
.| 2 N bitor             Python |. Bitwise or on ints, setwise union on collections. Casts to 1st arg type.
.< 2 N leftshift         Leftshift on int, cyclic leftshift on str/list.
.> 2 N rightshift        Rightshift on int, cyclic rightshift on str/list.
./ 1 N partition         Integer partitions on int, all possible splits on seq.
.* 1 N unpack            Python unpacking. Literally translates to *(_) in the output. Ends enclosing function.
.) 1 N pop               Remove and return last element of a list. Symbol from Golfscript.
.( 2 N pop2              Remove and return indexed element of a list.
.- 2 N remove            Multiset difference. Remove the leftmost instance of each element in 2nd argument from 1st argument. .-<seq><col>
._ 1 N sign              Use on num. 1 if positive, -1 if negative, 0 otherwise.
                         On seq, prefixes in increasing order of length.
.: 2 N substring         On :<seq><int> return all substrings of <seq> of length <int>. Cast <int> to range,
                         Float 2nd arg gives that ratio of the length of the seq substrings.
                         All possible substrings, if 2nd arg is omitted.
                         Col of ints 2nd arg gives all substrings of those lengths, ordered by
                         their starting points in the initial col, and by the original length
                         ordering.
.{ 1 N unique            A uniqueness test. Returns true iff the input has no repeated elements.
.! 1 N factorial         Python math.factorial(_).
.[ 3 N pad               Pads string or sequence, so that it reaches specific length. On <seq><any><int> pad right. On <int><seq><any> pad left and right.
                         On <any><int><seq> pad left. Returns a string, if <seq> and <any> ary both <str>.


Various string operations when calling rab with a str and b int:

    b result
    0 a.lower()
    1 a.upper()
    2 a.swapcase()
    3 a.title()
    4 a.capitalize()
    5 string.capwords(a)
    6 a.strip()
    7 [literal_eval(part) for part in a.split()]
    8 run length encode of seq.
    9 run length decode of seq. Accepts [[5, "a"], [6, 10] ...] style, and "12r3T242O" style.

Various date and time operations when calling .da with a int:

    a result
    0 Time since epoch in seconds.
    1 On Unix, time process has been running for. On Windows, time since .n1 was first called.
    2 Current [year, month, day, hour, minute, second, microseconds]
    3 year
    4 month
    5 day
    6 hour
    7 minute
    8 second
    9 weekday (0 is monday, 6 is sunday)

Various trigonometric functions when calling .tab:

    b result
    0 sin(a)
    1 cos(a)
    2 tan(a)
    3 asin(a)
    4 acos(a)
    5 atan(a)
    6 degrees(a)
    7 radians(a)
    8 sinh(a)
    9 cosh(a)
   10 tanh(a)
   11 asinh(a)
   12 acosh(a)
   13 atanh(a)
   14 atan2(*a)

Various regex operations when calling :abc
a is text, b is pattern.
    c result
    0 Match exists?
    1 All match texts
    2 Substitute match with first capturing groups
    3 re.split
    4 match test + all capturing groups, for all matches.
